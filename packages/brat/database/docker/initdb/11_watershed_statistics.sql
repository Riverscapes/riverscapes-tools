DROP VIEW IF EXISTS vw_watershed_statistics;
DROP TABLE IF EXISTS watershed_statistics;
DROP TABLE IF EXISTS statistics;
DROP TABLE IF EXISTS watershed_attributes;

CREATE TABLE watershed_attributes
(
    attribute_id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    attribute_name VARCHAR(255) UNIQUE NOT NULL,
    column_name    VARCHAR(30)         NOT NULL,
    description    TEXT
);

DROP TABLE IF EXISTS statistics;
CREATE TABLE statistics
(
    statistic_id   INT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    statistic_name VARCHAR(255) UNIQUE NOT NULL,
    description    TEXT
);

DROP TABLE IF EXISTS watershed_statistics;
CREATE TABLE watershed_statistics
(
    watershed_id VARCHAR(8)  NOT NULL,
    attribute_id INT         NOT NULL,
    statistic_id INT         NOT NULL,
    value        FLOAT       NOT NULL,
    created_on   TIMESTAMPTZ NOT NULL DEFAULT now(),
    updated_on   TIMESTAMPTZ NOT NULL DEFAULT now(),

    CONSTRAINT pk_watershed_statistics PRIMARY KEY (watershed_id, attribute_id, statistic_id),
    CONSTRAINT fk_watershed_statistics_watershed_id FOREIGN KEY (watershed_id) REFERENCES watersheds (watershed_id),
    CONSTRAINT fk_watershed_statistics_attribute_id FOREIGN KEY (attribute_id) REFERENCES watershed_attributes (attribute_id),
    CONSTRAINT fk_watershed_statistics_statistic_id FOREIGN KEY (statistic_id) REFERENCES statistics (statistic_id)
);
CREATE INDEX fx_watershed_statistics_attribute_id ON watershed_statistics (attribute_id);
CREATE INDEX fx_watershed_statistics_statistic_id ON watershed_statistics (statistic_id);


CREATE TRIGGER tr_watershed_statistics
    BEFORE UPDATE
    ON watershed_statistics
    FOR EACH ROW
EXECUTE PROCEDURE befo_update();

CREATE VIEW vw_watershed_statistics AS
(
SELECT w.watershed_id,
       w.name,
       a.attribute_name,
       a.column_name,
       s.statistic_name,
       ws.value
FROM watersheds w
         INNER JOIN watershed_statistics ws ON w.watershed_id = ws.watershed_id
         INNER JOIN watershed_attributes a ON ws.attribute_id = a.attribute_id
         INNER JOIN statistics s on ws.statistic_id = s.statistic_id
    );


GRANT SELECT, REFERENCES, TRIGGER ON ALL TABLES IN SCHEMA public TO brat_data_steward;
GRANT INSERT, UPDATE, DELETE ON watershed_attributes TO brat_data_steward;
GRANT INSERT, UPDATE, DELETE ON watershed_statistics TO brat_data_steward;
