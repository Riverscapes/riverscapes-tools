scalar JSONObject
scalar EnvVars
scalar DateTime
scalar URL

schema {
    query: Query
    mutation: Mutation
}

type Query {
    getProfile: User
    getCybercastorStatus: CybercastorStatus
    getUser(userId: ID!): User!

    # Get a project and associated metadata
    getJob(jobId: ID!): Job
    getTask(jobId: ID!, taskId: ID!): Task

    # Get from all jobs in the system (admin only)
    getJobs(jobStatus: JobStatusEnum!, limit: Int, nextToken: String): PaginatedJobs

    # This is a compound query
    getEngines: [TaskDef!]!
}

# this schema allows the following mutation:
type Mutation {
    updateUser(userId: ID!, user: UserInput): User
    deleteUser(userId: ID!): ID!
    blockUser(userId: ID!, block: Boolean): User

    addJob(job: JobInput!, tasks: [TaskInput!]!): Job!
    deleteJob(jobId: ID!): Job!
    stopJob(jobId: ID!): Job!
    restartJob(jobId: ID!, force: Boolean): Job!
    
    addTasks(jobId: ID!, tasks: [TaskInput!]!): [Task!]!
    deleteTasks(jobId: ID!, taskIds: [ID!]!): [Task!]!
    stopTasks(jobId: ID!, taskIds: [ID!]!): [Task!]!
    startTasks(jobId: ID!, taskIds: [ID!]!): [Task!]!
}

type PaginatedJobs {
    items: [Job!]!
    nextToken: String
}

type PaginatedTasks {
    items: [Task!]!
    nextToken: String
}

type AuthParams {
    loggedIn: Boolean
    userPool: String
    clientId: String
    region: String
    domain: String
}

type TaskDef {
    id: String!
    name: String!
    version: Int!
    taskScripts: [TaskScript!]!
    description: String
    taskDefProps: TaskDefProps
}

type TaskScript {
    id: String!
    name: String!
    description: String
    filename: String
    path: String # This is where the actual script lives
    taskDefProps: TaskDefProps    
    taskVars: [TaskVar!]! # Stored as JSON in the dict
    # remoteScriptPath: this is going to be the path relative to the public URL root for storing scripts
    remoteScriptPath: String
    # We also have the option of using a script already on the machine
    localScriptPath: String
}

# Translate Enums over from typescript
enum UserStatusEnum {
  ACTIVE
  BLOCKED
}
enum TaskStatusEnum {
    QUEUED
    STARTING
    RUNNING
    STOPPED
    SUCCEEDED
    FAILED
    DELETE_REQUESTED
    STOP_REQUESTED
}
enum JobStatusEnum {
    ACTIVE
    COMPLETE
    RESTART_REQUESTED
    DELETE_REQUESTED
    STOP_REQUESTED
}
enum VarTypeEnum {
    STRING
    BIGSTRING
}

type CybercastorStatus {
  maxTasks: Int!
  runningJobs: Int!
  runningTasks: Int!
  queuedTasks: Int!
}

enum APIErrorEnum {
  AUTHENTICATION_ERROR
  SERVER_ERROR
  PERMISSION_DENIED
  PARAM_ERROR
  COLLISION
  NOT_ADMIN
  NOT_FOUND
  DELETED
}

type TaskVar {
    name: String!
    description: String
    varType: VarTypeEnum
    optional: Boolean
    regex: String!
}

input TaskVarInput {
    name: String!
    description: String
    varType: VarTypeEnum!
    regex: String!
}

type Job {
    # Auto-Generated
    id: ID!
    createdById: ID!
    updatedById: ID!
    createdBy: User!
    updatedBy: User!
    createdOn: DateTime!
    updatedOn: DateTime!
    status: JobStatusEnum! # [ACTIVE, COMPLETE]
    # Specified
    meta: JSONObject!
    name: String!
    description: String
    taskDefId: ID!
    taskDef: TaskDef!
    taskScriptId: ID!
    taskScript: TaskScript!
    tasks(limit: Int, nextToken: String): PaginatedTasks
    # <!-- PRIVATE -->
    env: EnvVars!
}

input JobInput {
    name: String!
    description: String
    taskDefId: String!
    taskScriptId: String!
    """
    This is the environment variables that will be passed to the task. It is stringified JSON
    """
    meta: String
    """
    This is the environment variables that will be passed to the task. It is stringified JSON
    """
    env: String
}

input JobUpdate {
    name: String
    description: String
    """
    This is the environment variables that will be passed to the task. It is stringified JSON
    """
    meta: String
    """
    This is the environment variables that will be passed to the task. It is stringified JSON
    """
    env: String
    status: JobStatusEnum
}

input TaskInput {
    name: String!
    """
    This is the environment variables that will be passed to the task. It is stringified JSON
    """
    meta: String
    """
    This is the environment variables that will be passed to the task. It is stringified JSON
    """
    env: String
    # taskDefProps defined at this level take precedence over job or script
    taskDefProps: TaskDefPropsInput
}

# // Chronos is allowed to set a few more things
# // This includes more than GQL has access to change
# // Because our APIs need more access
input TaskUpdate {
    name: String
    startedOn: DateTime
    endedOn: DateTime
    ECSTaskId: String
    logStream: String
    logUrl: URL
    retries: Int
    status: TaskStatusEnum
    """
    This is the environment variables that will be passed to the task. It is stringified JSON
    """
    meta: String
    """
    This is the environment variables that will be passed to the task. It is stringified JSON
    """
    env: String
    exitCode: Int
    # The CPU and memory get reported back after the job starts. This is different from taskDefProps
    # and is for reporting purposes only
    cpu: Int
    memory: Int
}

# This corresponds to import { aws_ecs as ecs } from 'aws-cdk-lib'
# But we limit it to just cpu and memoryLimitMiB for now
input TaskDefPropsInput {
  cpu: Int
  memoryLimitMiB: Int
  ephemeralStorageGiB: Int
}
type TaskDefProps {
  cpu: Int
  memoryLimitMiB: Int
  ephemeralStorageGiB: Int
}

type Task {
    # Implied or Auto-Generated
    id: ID!
    jobId: ID!
    job: Job!
    createdById: ID!
    updatedById: ID!
    createdBy: User!
    updatedBy: User!
    meta: JSONObject!
    createdOn: DateTime!
    updatedOn: DateTime!
    startedOn: DateTime
    endedOn: DateTime
    queriedOn: DateTime!
    ECSTaskId: ID
    logStream: String
    logUrl: URL
    retries: Int!
    # Note: this is different from cpu in taskDefProps.
    # It is the cpu that the system reports back that it used
    cpu: Int
    memory: Int
    taskDefProps: TaskDefProps
    status: TaskStatusEnum! # [pending, started, complete, error]
    # Specified
    # <!-- PRIVATE -->
    name: ID!
    env: EnvVars!
}

type User {
  id: ID!
  name: String!
  status: UserStatusEnum!
  createdOn: DateTime!
  updatedOn: DateTime!
  maxConcurrentTasks: Int
  isBlocked: Boolean!
  # this comes from auth
  isAdmin: Boolean!
  # Now some queries
  jobs(jobStatus: JobStatusEnum, taskStatus: TaskStatusEnum, limit: Int, nextToken: String): PaginatedJobs
}

input UserInput {
  name: String
  isAdmin: Boolean
  status: UserStatusEnum
  maxConcurrentTasks: Int
}
